{"version":3,"file":"js/545.81ff9872.js","mappings":"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","sources":["webpack://my-vue3-cli/./src/components/ToastMessages.vue","webpack://my-vue3-cli/./src/components/ToastList.vue","webpack://my-vue3-cli/./src/components/ToastList.vue?e15a","webpack://my-vue3-cli/./src/components/ToastMessages.vue?2a51","webpack://my-vue3-cli/./src/views/UserBoard.vue","webpack://my-vue3-cli/./src/views/UserBoard.vue?d6f4","webpack://my-vue3-cli/../src/index.ts","webpack://my-vue3-cli/./src/methods/emitter.js"],"sourcesContent":["<template>\r\n  <div class=\"toast-container position-absolute pe-3 top-0 end-0\">\r\n    <ToastList  v-for=\"msg in messages\"\r\n      :key=\"msg.id\"\r\n      :msg=\"msg\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ToastList from './ToastList.vue';\r\nexport default {\r\n    name:'ToastMessages',\r\n    components:{ToastList},\r\n    data() {\r\n        return {\r\n            messages:[]\r\n        }\r\n    },\r\n    inject:['emitter'],\r\n    mounted() {\r\n        this.emitter.on('push-message',(message)=> {\r\n                const { style = 'success', title, content} =message;\r\n                const id = Date.now(); // ✅ 每個訊息有唯一 id\r\n                this.messages.push({id, style, title, content})\r\n\r\n                \r\n            }\r\n        )\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>","<template>\r\n  <div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" ref=\"toast\">\r\n    <div class=\"toast-header\">\r\n      <span :class=\"`bg-${msg.style} p-2 rounded me-2 d-inline-block`\"></span>\r\n      <strong class=\"me-auto\">{{ msg.title }}</strong>\r\n      <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\r\n    </div>\r\n    <div class=\"toast-body\" v-if=\"msg.content\">\r\n      {{ msg.content }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Toast } from 'bootstrap/dist/js/bootstrap.bundle.min';\r\nexport default {\r\n    name:'ToastList',\r\n    props:[\r\n        'msg'\r\n    ],\r\n    mounted() {\r\n        \r\n        const toastEl = this.$refs.toast\r\n        const toast = new Toast(toastEl, {\r\n            delay:6000\r\n        })\r\n        toast.show();\r\n        \r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>","import { render } from \"./ToastList.vue?vue&type=template&id=2add6115\"\nimport script from \"./ToastList.vue?vue&type=script&lang=js\"\nexport * from \"./ToastList.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ToastMessages.vue?vue&type=template&id=1570b074\"\nimport script from \"./ToastMessages.vue?vue&type=script&lang=js\"\nexport * from \"./ToastMessages.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n    <div class=\"container-fluid\">\r\n      <router-link class=\"navbar-brand\" to=\"/user/cart\">用戶端範例</router-link>\r\n    </div>\r\n  </nav>\r\n  <div class=\"container-fluid mt-3 position-relative\">\r\n    <ToastMessages></ToastMessages>\r\n    <router-view/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport emitter from '../methods/emitter';\r\nimport ToastMessages from '../components/ToastMessages.vue';\r\n\r\nexport default {\r\n    name:'UserBoard',\r\n    components: {\r\n      ToastMessages,\r\n    },\r\n    provide() {\r\n      return {\r\n        emitter,\r\n      };\r\n    },\r\n  created() {\r\n  },\r\n};\r\n</script>","import { render } from \"./UserBoard.vue?vue&type=template&id=70701f7d\"\nimport script from \"./UserBoard.vue?vue&type=script&lang=js\"\nexport * from \"./UserBoard.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<\n\tWildcardHandler<T>\n>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(\n\t\ttype: Key,\n\t\thandler?: Handler<Events[Key]>\n\t): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(\n\t\ttype: undefined extends Events[Key] ? Key : never\n\t): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t} else {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t} else {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n","import mitt from \"mitt\";\r\n\r\nconst emitter = mitt();\r\n\r\nexport default emitter"],"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","messages","msg","_createBlock","_component_ToastList","key","id","role","ref","_createElementVNode","_hoisted_2","_normalizeClass","$props","style","_hoisted_3","_toDisplayString","title","type","content","_hoisted_4","name","props","mounted","toastEl","this","$refs","toast","Toast","delay","show","__exports__","components","ToastList","data","inject","emitter","on","message","Date","now","push","render","_createVNode","_component_router_link","to","_cache","_component_ToastMessages","_component_router_view","ToastMessages","provide","created","n","all","Map","t","e","i","get","set","off","splice","indexOf","emit","slice","map","mitt"],"sourceRoot":""}